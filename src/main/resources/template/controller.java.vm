package ${package.Controller};

import ${package.Service}.${table.serviceName};
import ${package.EntityVO}.Save${entity}VO;
import ${package.EntityVO}.Update${entity}VO;
import ${package.EntityVO}.${entity}VO;
import ${package.Entity}.${entity};
import com.chartmo.result.ResultModel;
import com.chartmo.service.BaseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.NotBlank;
import java.util.List;
import java.util.stream.Collectors;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;


/**
 * <p>
 * ${table.comment}  前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Controller
@Validated
@Api(value = "${table.comment}")
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/${table.entityName.toLowerCase()}")
public class ${table.controllerName} {

    @Autowired
    private BaseService<${entity}> baseService;

    /**
     * 添加对象
     *
     * @param ${table.strConvertLowerCamel(${entity})} 对象
     * @return ResultModel统一响应结果
     */
    @PostMapping("save")
    @ResponseBody
    @ApiOperation(value = "添加")
    public ResultModel<Object> save(@ModelAttribute Save${entity}VO ${table.strConvertLowerCamel(${entity})}) {
        baseService.save(${table.strConvertLowerCamel(${entity})}.to${entity}());
        return ResultModel.success();
    }

    /**
     * 根据ID进行删除
     *
     * @param key 唯一标识
     * @return ResultModel统一响应结果
     */
    @PostMapping("removeById")
    @ResponseBody
    @ApiOperation(value = "删除")
    @ApiImplicitParam(paramType = "query", name = "key", value = "唯一标识", required = true, dataType = "String")
    public ResultModel<Object> delete(@NotBlank(message = "唯一标识不能为空") String key) {
        baseService.remove(key);
        return ResultModel.success();
    }

    /**
     * 根据ID进行修改对象
     *
     * @param ${table.strConvertLowerCamel(${entity})} 对象中必须有ID主键
     * @return ResultModel统一响应结果
     */
    @PostMapping("update")
    @ResponseBody
    @ApiOperation(value = "修改")
    public ResultModel<Object> update(@ModelAttribute Update${entity}VO ${table.strConvertLowerCamel(${entity})}) {
        baseService.update(${table.strConvertLowerCamel(${entity})}.to${entity}());
        return ResultModel.success();
    }

    /**
     * 查询详情
     *
     * @param key 唯一标识
     * @return ResultModel统一响应结果
     */
    @GetMapping("getById")
    @ResponseBody
    @ApiOperation(value = "通过唯一标识查询单个")
    @ApiImplicitParam(paramType = "query", name = "key", value = "唯一标识", required = true, dataType = "String")
    public ResultModel<${entity}VO> getById(@NotBlank(message = "唯一标识不能为空") String key) {
        ${entity}VO ${table.strConvertLowerCamel(${entity})} = new ${entity}VO(baseService.getByKey(key));
        return ResultModel.success(${table.strConvertLowerCamel(${entity})});
    }

    /**
     * 分页查询
     *
     * @return ResultModel统一响应结果
     */
    @PostMapping("list")
    @ResponseBody
    @ApiOperation(value = "查询所有")
    public ResultModel<List<${entity}VO>> list() {
        List<${entity}VO> list = baseService.findAll().stream().map(${table.strConvertLowerCamel(${entity})} -> new ${entity}VO(${table.strConvertLowerCamel(${entity})})).collect(Collectors.toList());
        return ResultModel.success(list);
    }
}
