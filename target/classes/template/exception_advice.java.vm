package ${package.ResultModel};

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.web.HttpRequestMethodNotSupportedException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;
import org.springframework.web.util.NestedServletException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import java.net.SocketException;
import java.sql.SQLException;
import java.util.concurrent.ExecutionException;

/**
 * 统一异常处理
 *
 * @author ${author}
 * @since ${date}
 */
@ControllerAdvice
@RestController
@Slf4j
public class ExceptionAdvice {

    @Autowired
    HttpServletRequest httpServletRequest;

    /**
     * 异常日志记录
     *
     * @param e
     */
    private void logErrorRequest(Exception e) {
        String info = String.format("报错API URL: %s%n Query String: %s",
                httpServletRequest.getRequestURI(),
                httpServletRequest.getQueryString());
        log.error(info.replaceAll("[\r\n]", ""));
        log.error(e.getMessage(), e);
        String ipInfo = "报错访问者IP信息：" + httpServletRequest.getRemoteAddr() + "," + httpServletRequest.getRemoteHost();
        log.error(ipInfo.replaceAll("[\r\n]", ""));
    }

    /**
     * 参数校验异常
     *
     * @param exception
     * @return
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    protected ResultModel methodArgumentNotValid(MethodArgumentNotValidException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * 参数格式有误
     *
     * @param exception
     * @return
     */
    @ExceptionHandler({MethodArgumentTypeMismatchException.class, HttpMessageNotReadableException.class})
    protected ResultModel typeMismatch(Exception exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * 缺少参数
     *
     * @param exception
     * @return
     */
    @ExceptionHandler({MissingServletRequestParameterException.class})
    protected ResultModel missingServletRequestParameter(MissingServletRequestParameterException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * @param exception
     * @return
     */
    @ExceptionHandler({ExecutionException.class})
    protected ResultModel executionException(ExecutionException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * @param exception
     * @return
     */
    @ExceptionHandler({InterruptedException.class})
    protected ResultModel interruptedException(InterruptedException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * 参数检验失败
     *
     * @param exception
     * @return
     */
    @ExceptionHandler(IllegalArgumentException.class)
    protected ResultModel illegalArgument(IllegalArgumentException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * 不支持的请求类型
     *
     * @param exception
     * @return
     */
    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)
    protected ResultModel httpRequestMethodNotSupported(HttpRequestMethodNotSupportedException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * 数据库连接异常
     *
     * @param exception
     * @return
     */
    @ExceptionHandler(SQLException.class)
    protected ResultModel sqlException(SQLException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * IO异常
     *
     * @param exception
     * @return
     */
    @ExceptionHandler({IOException.class})
    protected ResultModel iOException(IOException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * 网络请求异常
     *
     * @param exception
     * @return
     */
    @ExceptionHandler({HttpClientErrorException.class})
    protected ResultModel httpClientErrorException(HttpClientErrorException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * 类转换异常
     *
     * @param exception
     * @return
     */
    @ExceptionHandler({ClassCastException.class})
    protected ResultModel classCastException(ClassCastException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * 网络请求异常
     *
     * @param exception
     * @return
     */
    @ExceptionHandler({NestedServletException.class})
    protected ResultModel nestedServletException(NestedServletException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * servlet异常
     *
     * @param exception
     * @return
     */
    @ExceptionHandler({ServletException.class})
    protected ResultModel servletException(ServletException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * servlet异常
     *
     * @param exception
     * @return
     */
    @ExceptionHandler({SocketException.class})
    protected ResultModel socketException(SocketException exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }

    /**
     * 其他异常
     *
     * @param exception
     * @return
     */
    @ExceptionHandler({Exception.class})
    protected ResultModel commonException(Exception exception) {
        logErrorRequest(exception);
        return ResultModel.fail(exception.getMessage());
    }
}
